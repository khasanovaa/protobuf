// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace test {
constexpr Person_MapVarEntry_DoNotUse::Person_MapVarEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Person_MapVarEntry_DoNotUseDefaultTypeInternal {
  constexpr Person_MapVarEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Person_MapVarEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Person_MapVarEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Person_MapVarEntry_DoNotUseDefaultTypeInternal _Person_MapVarEntry_DoNotUse_default_instance_;
constexpr Person_Nested::Person_Nested(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Person_NestedDefaultTypeInternal {
  constexpr Person_NestedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Person_NestedDefaultTypeInternal() {}
  union {
    Person_Nested _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Person_NestedDefaultTypeInternal _Person_Nested_default_instance_;
constexpr Person::Person(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_var_(nullptr)
  , enum_var_(0)

  , _oneof_case_{}{}
struct PersonDefaultTypeInternal {
  constexpr PersonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PersonDefaultTypeInternal() {}
  union {
    Person _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace test
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_test_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_test_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_test_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_test_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::test::Person_MapVarEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::test::Person_MapVarEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // stripped
  ~0u,  // stripped
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::Person_Nested, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // stripped
  ~0u,  // stripped
  ~0u,  // stripped
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test::Person, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::test::Person, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // stripped
  ~0u,  // stripped
  ~0u,  // stripped
  PROTOBUF_FIELD_OFFSET(::test::Person, enum_var_),
  PROTOBUF_FIELD_OFFSET(::test::Person, message_var_),
  ~0u,  // stripped
  ~0u,  // stripped
  PROTOBUF_FIELD_OFFSET(::test::Person, oneof_var_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::test::Person_MapVarEntry_DoNotUse)},
  { 9, -1, sizeof(::test::Person_Nested)},
  { 17, -1, sizeof(::test::Person)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::_Person_MapVarEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::_Person_Nested_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test::_Person_default_instance_),
};

const char descriptor_table_protodef_test_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntest.proto\022\004test\"\317\003\n\006Person\022\027\n\nstring_"
  "var\030\001 \001(\tH\001\210\001\001\022\024\n\007int_var\030\002 \001(\005H\002\210\001\001\022)\n\007"
  "map_var\030\003 \003(\0132\030.test.Person.MapVarEntry\022"
  "\"\n\010enum_var\030\004 \001(\0162\020.test.SimpleEnum\022(\n\013m"
  "essage_var\030\005 \001(\0132\023.test.Person.Nested\0221\n"
  "\024repeated_message_var\030\006 \003(\0132\023.test.Perso"
  "n.Nested\022\027\n\roneof_int_var\030\007 \001(\005H\000\032;\n\013Map"
  "VarEntry\022\013\n\003key\030\001 \001(\t\022\033\n\005value\030\002 \001(\0132\014.t"
  "est.Person:\0028\001\032l\n\006Nested\022\030\n\020repeated_int"
  "_var\030\001 \003(\005\022\033\n\023repeated_string_var\030\002 \003(\t\022"
  "+\n\021repeated_enum_var\030\003 \003(\0162\020.test.Simple"
  "EnumB\013\n\toneof_varB\r\n\013_string_varB\n\n\010_int"
  "_var*,\n\nSimpleEnum\022\r\n\tBAR_VALUE\020\000\022\017\n\013OTH"
  "ER_VALUE\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_test_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto = {
  false, false, 538, descriptor_table_protodef_test_2eproto, "test.proto", 
  &descriptor_table_test_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_test_2eproto::offsets,
  file_level_metadata_test_2eproto, file_level_enum_descriptors_test_2eproto, file_level_service_descriptors_test_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_test_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_2eproto);
  return descriptor_table_test_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_test_2eproto(&descriptor_table_test_2eproto);
namespace test {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_2eproto);
  return file_level_enum_descriptors_test_2eproto[0];
}
bool SimpleEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Person_MapVarEntry_DoNotUse::Person_MapVarEntry_DoNotUse() {}
Person_MapVarEntry_DoNotUse::Person_MapVarEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Person_MapVarEntry_DoNotUse::MergeFrom(const Person_MapVarEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Person_MapVarEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Person_MapVarEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Person_Nested::_Internal {
 public:
};

Person_Nested::Person_Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test.Person.Nested)
}
Person_Nested::Person_Nested(const Person_Nested& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test.Person.Nested)
}

void Person_Nested::SharedCtor() {
}

Person_Nested::~Person_Nested() {
  // @@protoc_insertion_point(destructor:test.Person.Nested)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Person_Nested::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Person_Nested::ArenaDtor(void* object) {
  Person_Nested* _this = reinterpret_cast< Person_Nested* >(object);
  (void)_this;
}
void Person_Nested::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Person_Nested::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Person_Nested::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Person.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Person_Nested::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person_Nested::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Person.Nested)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Person.Nested)
  return target;
}

size_t Person_Nested::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Person.Nested)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person_Nested::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Person.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  const Person_Nested* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person_Nested>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Person.Nested)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Person.Nested)
    MergeFrom(*source);
  }
}

void Person_Nested::MergeFrom(const Person_Nested& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Person.Nested)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Person_Nested::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Person.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person_Nested::CopyFrom(const Person_Nested& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Person.Nested)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person_Nested::IsInitialized() const {
  return true;
}

void Person_Nested::InternalSwap(Person_Nested* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person_Nested::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Person::_Internal {
 public:
  static const ::test::Person_Nested& message_var(const Person* msg);
};

const ::test::Person_Nested&
Person::_Internal::message_var(const Person* msg) {
  return *msg->message_var_;
}
Person::Person(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:test.Person)
}
Person::Person(const Person& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message_var()) {
    message_var_ = new ::test::Person_Nested(*from.message_var_);
  } else {
    message_var_ = nullptr;
  }
  enum_var_ = from.enum_var_;
  clear_has_oneof_var();
  switch (from.oneof_var_case()) {
    case kOneofIntVar: {
      break;
    }
    case ONEOF_VAR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:test.Person)
}

void Person::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_var_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enum_var_) -
    reinterpret_cast<char*>(&message_var_)) + sizeof(enum_var_));
clear_has_oneof_var();
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:test.Person)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Person::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete message_var_;
  if (has_oneof_var()) {
    clear_oneof_var();
  }
}

void Person::ArenaDtor(void* object) {
  Person* _this = reinterpret_cast< Person* >(object);
  (void)_this;
}
void Person::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Person::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Person::clear_oneof_var() {
// @@protoc_insertion_point(one_of_clear_start:test.Person)
  switch (oneof_var_case()) {
    case kOneofIntVar: {
      // No need to clear
      break;
    }
    case ONEOF_VAR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_VAR_NOT_SET;
}


void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:test.Person)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && message_var_ != nullptr) {
    delete message_var_;
  }
  message_var_ = nullptr;
  enum_var_ = 0;
  clear_oneof_var();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Person::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .test.SimpleEnum enum_var = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_enum_var(static_cast<::test::SimpleEnum>(val));
        } else goto handle_unusual;
        continue;
      // .test.Person.Nested message_var = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_var(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Person::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.Person)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .test.SimpleEnum enum_var = 4;
  if (this->enum_var() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_enum_var(), target);
  }

  // .test.Person.Nested message_var = 5;
  if (this->has_message_var()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::message_var(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.Person)
  return target;
}

size_t Person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.Person)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .test.Person.Nested message_var = 5;
  if (this->has_message_var()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_var_);
  }

  // .test.SimpleEnum enum_var = 4;
  if (this->enum_var() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_var());
  }

  switch (oneof_var_case()) {
    // int32 oneof_int_var = 7;
    case kOneofIntVar: {
      break;
    }
    case ONEOF_VAR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Person::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:test.Person)
  GOOGLE_DCHECK_NE(&from, this);
  const Person* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Person>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:test.Person)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:test.Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test.Person)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_var()) {
    _internal_mutable_message_var()->::test::Person_Nested::MergeFrom(from._internal_message_var());
  }
  if (from.enum_var() != 0) {
    _internal_set_enum_var(from._internal_enum_var());
  }
  switch (from.oneof_var_case()) {
    case kOneofIntVar: {
      break;
    }
    case ONEOF_VAR_NOT_SET: {
      break;
    }
  }
}

void Person::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:test.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  return true;
}

void Person::InternalSwap(Person* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Person, enum_var_)
      + sizeof(Person::enum_var_)
      - PROTOBUF_FIELD_OFFSET(Person, message_var_)>(
          reinterpret_cast<char*>(&message_var_),
          reinterpret_cast<char*>(&other->message_var_));
  swap(oneof_var_, other->oneof_var_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Person::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test::Person_MapVarEntry_DoNotUse* Arena::CreateMaybeMessage< ::test::Person_MapVarEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::Person_MapVarEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::test::Person_Nested* Arena::CreateMaybeMessage< ::test::Person_Nested >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::Person_Nested >(arena);
}
template<> PROTOBUF_NOINLINE ::test::Person* Arena::CreateMaybeMessage< ::test::Person >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::Person >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
