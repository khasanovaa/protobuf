// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_test_2eproto_metadata_getter(int index);
namespace test {
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Person_MapVarEntry_DoNotUse;
struct Person_MapVarEntry_DoNotUseDefaultTypeInternal;
extern Person_MapVarEntry_DoNotUseDefaultTypeInternal _Person_MapVarEntry_DoNotUse_default_instance_;
class Person_Nested;
struct Person_NestedDefaultTypeInternal;
extern Person_NestedDefaultTypeInternal _Person_Nested_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::Person* Arena::CreateMaybeMessage<::test::Person>(Arena*);
template<> ::test::Person_MapVarEntry_DoNotUse* Arena::CreateMaybeMessage<::test::Person_MapVarEntry_DoNotUse>(Arena*);
template<> ::test::Person_Nested* Arena::CreateMaybeMessage<::test::Person_Nested>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

enum SimpleEnum : int {
  BAR_VALUE = 0,
  OTHER_VALUE = 1,
  SimpleEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SimpleEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SimpleEnum_IsValid(int value);
constexpr SimpleEnum SimpleEnum_MIN = BAR_VALUE;
constexpr SimpleEnum SimpleEnum_MAX = OTHER_VALUE;
constexpr int SimpleEnum_ARRAYSIZE = SimpleEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SimpleEnum_descriptor();
template<typename T>
inline const std::string& SimpleEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimpleEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimpleEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SimpleEnum_descriptor(), enum_t_value);
}
inline bool SimpleEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SimpleEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SimpleEnum>(
    SimpleEnum_descriptor(), name, value);
}
// ===================================================================

class Person_MapVarEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Person_MapVarEntry_DoNotUse, 
    std::string, ::test::Person,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Person_MapVarEntry_DoNotUse, 
    std::string, ::test::Person,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Person_MapVarEntry_DoNotUse();
  explicit constexpr Person_MapVarEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Person_MapVarEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Person_MapVarEntry_DoNotUse& other);
  static const Person_MapVarEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Person_MapVarEntry_DoNotUse*>(&_Person_MapVarEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "test.Person.MapVarEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test_2eproto);
    return ::descriptor_table_test_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Person_Nested PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.Person.Nested) */ {
 public:
  inline Person_Nested() : Person_Nested(nullptr) {}
  virtual ~Person_Nested();
  explicit constexpr Person_Nested(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person_Nested(const Person_Nested& from);
  Person_Nested(Person_Nested&& from) noexcept
    : Person_Nested() {
    *this = ::std::move(from);
  }

  inline Person_Nested& operator=(const Person_Nested& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person_Nested& operator=(Person_Nested&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person_Nested& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person_Nested* internal_default_instance() {
    return reinterpret_cast<const Person_Nested*>(
               &_Person_Nested_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person_Nested& a, Person_Nested& b) {
    a.Swap(&b);
  }
  inline void Swap(Person_Nested* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person_Nested* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person_Nested* New() const final {
    return CreateMaybeMessage<Person_Nested>(nullptr);
  }

  Person_Nested* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person_Nested>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person_Nested& from);
  void MergeFrom(const Person_Nested& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person_Nested* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.Person.Nested";
  }
  protected:
  explicit Person_Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_test_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedIntVarFieldNumber = 1,
    kRepeatedStringVarFieldNumber = 2,
    kRepeatedEnumVarFieldNumber = 3,
  };
  // repeated int32 repeated_int_var = 1;
  int repeated_int_var_size() const {__builtin_trap();}
  void clear_repeated_int_var(){}
  ::PROTOBUF_NAMESPACE_ID::int32 repeated_int_var(int index) const {__builtin_trap();}
  void set_repeated_int_var(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {}
  void add_repeated_int_var(::PROTOBUF_NAMESPACE_ID::int32 value) {}
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      repeated_int_var() const {__builtin_trap();}
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_repeated_int_var() {__builtin_trap();}

  // repeated string repeated_string_var = 2;
  int repeated_string_var_size() const {__builtin_trap();}
  void clear_repeated_string_var(){}
  const std::string& repeated_string_var(int index) const {__builtin_trap();}
  std::string* mutable_repeated_string_var(int index) {__builtin_trap();}
  void set_repeated_string_var(int index, const std::string& value) {}
  void set_repeated_string_var(int index, std::string&& value) {}
  void set_repeated_string_var(int index, const char* value) {}
  void set_repeated_string_var(int index, const char* value, size_t size) {}
  std::string* add_repeated_string_var() {}
  void add_repeated_string_var(const std::string& value) {}
  void add_repeated_string_var(std::string&& value) {}
  void add_repeated_string_var(const char* value) {}
  void add_repeated_string_var(const char* value, size_t size) {}
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string_var() const {__builtin_trap();}
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string_var() {__builtin_trap();}

  // repeated .test.SimpleEnum repeated_enum_var = 3;
  int repeated_enum_var_size() const {__builtin_trap();}
  void clear_repeated_enum_var(){}
  ::test::SimpleEnum repeated_enum_var(int index) const {__builtin_trap();}
  void set_repeated_enum_var(int index, ::test::SimpleEnum value) {}
  void add_repeated_enum_var(::test::SimpleEnum value) {}
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& repeated_enum_var() const {__builtin_trap();}
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_repeated_enum_var() {__builtin_trap();}

  // @@protoc_insertion_point(class_scope:test.Person.Nested)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  virtual ~Person();
  explicit constexpr Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  enum OneofVarCase {
    kOneofIntVar = 7,
    ONEOF_VAR_NOT_SET = 0,
  };

  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_test_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Person_Nested Nested;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageVarFieldNumber = 5,
    kEnumVarFieldNumber = 4,
    kStringVarFieldNumber = 1,
    kIntVarFieldNumber = 2,
    kMapVarFieldNumber = 3,
    kRepeatedMessageVarFieldNumber = 6,
    kOneofIntVarFieldNumber = 7,
  };
  // .test.Person.Nested message_var = 5;
  bool has_message_var() const;
  private:
  bool _internal_has_message_var() const;
  public:
  void clear_message_var();
  const ::test::Person_Nested& message_var() const;
  ::test::Person_Nested* release_message_var();
  ::test::Person_Nested* mutable_message_var();
  void set_allocated_message_var(::test::Person_Nested* message_var);
  private:
  const ::test::Person_Nested& _internal_message_var() const;
  ::test::Person_Nested* _internal_mutable_message_var();
  public:
  void unsafe_arena_set_allocated_message_var(
      ::test::Person_Nested* message_var);
  ::test::Person_Nested* unsafe_arena_release_message_var();

  // .test.SimpleEnum enum_var = 4;
  void clear_enum_var();
  ::test::SimpleEnum enum_var() const;
  void set_enum_var(::test::SimpleEnum value);
  private:
  ::test::SimpleEnum _internal_enum_var() const;
  void _internal_set_enum_var(::test::SimpleEnum value);
  public:

  // string string_var = 1;
  bool has_string_var() const {__builtin_trap();}
  void clear_string_var(){}
  const std::string& string_var() const {__builtin_trap();}
  void set_string_var(const std::string& value) {}
  void set_string_var(std::string&& value) {}
  void set_string_var(const char* value) {}
  void set_string_var(const char* value, size_t size) {}
  std::string* mutable_string_var() {__builtin_trap();}
  std::string* release_string_var() {__builtin_trap();}
  void set_allocated_string_var(std::string* string_var) {}

  // int32 int_var = 2;
  bool has_int_var() const {__builtin_trap();}
  void clear_int_var(){}
  ::PROTOBUF_NAMESPACE_ID::int32 int_var() const {__builtin_trap();}
  void set_int_var(::PROTOBUF_NAMESPACE_ID::int32 value) {}

  // map<string, .test.Person> map_var = 3;
  int map_var_size() const {__builtin_trap();}
  void clear_map_var(){}
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::Person >&
      map_var() const {__builtin_trap();}
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::test::Person >*
      mutable_map_var() {__builtin_trap();}

  // repeated .test.Person.Nested repeated_message_var = 6;
  int repeated_message_var_size() const {__builtin_trap();}
  void clear_repeated_message_var(){}
  ::test::Person_Nested* mutable_repeated_message_var(int index) {__builtin_trap();}
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Person_Nested >*
      mutable_repeated_message_var() {__builtin_trap();}
  const ::test::Person_Nested& repeated_message_var(int index) const {__builtin_trap();}
  ::test::Person_Nested* add_repeated_message_var() {}
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::Person_Nested >&
      repeated_message_var() const {__builtin_trap();}

  // int32 oneof_int_var = 7;
  bool has_oneof_int_var() const {__builtin_trap();}
  void clear_oneof_int_var(){}
  ::PROTOBUF_NAMESPACE_ID::int32 oneof_int_var() const {__builtin_trap();}
  void set_oneof_int_var(::PROTOBUF_NAMESPACE_ID::int32 value) {}

  void clear_oneof_var();
  OneofVarCase oneof_var_case() const;
  // @@protoc_insertion_point(class_scope:test.Person)
 private:
  class _Internal;
  void set_has_oneof_int_var();

  inline bool has_oneof_var() const;
  inline void clear_has_oneof_var();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::test::Person_Nested* message_var_;
  int enum_var_;
  union OneofVarUnion {
    constexpr OneofVarUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
  } oneof_var_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Person_Nested

// repeated int32 repeated_int_var = 1;
// repeated string repeated_string_var = 2;
// repeated .test.SimpleEnum repeated_enum_var = 3;
// -------------------------------------------------------------------

// Person

// string string_var = 1;
// int32 int_var = 2;
// map<string, .test.Person> map_var = 3;
// .test.SimpleEnum enum_var = 4;
inline void Person::clear_enum_var() {
  enum_var_ = 0;
}
inline ::test::SimpleEnum Person::_internal_enum_var() const {
  return static_cast< ::test::SimpleEnum >(enum_var_);
}
inline ::test::SimpleEnum Person::enum_var() const {
  // @@protoc_insertion_point(field_get:test.Person.enum_var)
  return _internal_enum_var();
}
inline void Person::_internal_set_enum_var(::test::SimpleEnum value) {
  
  enum_var_ = value;
}
inline void Person::set_enum_var(::test::SimpleEnum value) {
  _internal_set_enum_var(value);
  // @@protoc_insertion_point(field_set:test.Person.enum_var)
}

// .test.Person.Nested message_var = 5;
inline bool Person::_internal_has_message_var() const {
  return this != internal_default_instance() && message_var_ != nullptr;
}
inline bool Person::has_message_var() const {
  return _internal_has_message_var();
}
inline void Person::clear_message_var() {
  if (GetArena() == nullptr && message_var_ != nullptr) {
    delete message_var_;
  }
  message_var_ = nullptr;
}
inline const ::test::Person_Nested& Person::_internal_message_var() const {
  const ::test::Person_Nested* p = message_var_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::Person_Nested&>(
      ::test::_Person_Nested_default_instance_);
}
inline const ::test::Person_Nested& Person::message_var() const {
  // @@protoc_insertion_point(field_get:test.Person.message_var)
  return _internal_message_var();
}
inline void Person::unsafe_arena_set_allocated_message_var(
    ::test::Person_Nested* message_var) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_var_);
  }
  message_var_ = message_var;
  if (message_var) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.Person.message_var)
}
inline ::test::Person_Nested* Person::release_message_var() {
  
  ::test::Person_Nested* temp = message_var_;
  message_var_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::test::Person_Nested* Person::unsafe_arena_release_message_var() {
  // @@protoc_insertion_point(field_release:test.Person.message_var)
  
  ::test::Person_Nested* temp = message_var_;
  message_var_ = nullptr;
  return temp;
}
inline ::test::Person_Nested* Person::_internal_mutable_message_var() {
  
  if (message_var_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::Person_Nested>(GetArena());
    message_var_ = p;
  }
  return message_var_;
}
inline ::test::Person_Nested* Person::mutable_message_var() {
  // @@protoc_insertion_point(field_mutable:test.Person.message_var)
  return _internal_mutable_message_var();
}
inline void Person::set_allocated_message_var(::test::Person_Nested* message_var) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_var_;
  }
  if (message_var) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message_var);
    if (message_arena != submessage_arena) {
      message_var = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_var, submessage_arena);
    }
    
  } else {
    
  }
  message_var_ = message_var;
  // @@protoc_insertion_point(field_set_allocated:test.Person.message_var)
}

// repeated .test.Person.Nested repeated_message_var = 6;
// int32 oneof_int_var = 7;
inline bool Person::has_oneof_var() const {
  return oneof_var_case() != ONEOF_VAR_NOT_SET;
}
inline void Person::clear_has_oneof_var() {
  _oneof_case_[0] = ONEOF_VAR_NOT_SET;
}
inline Person::OneofVarCase Person::oneof_var_case() const {
  return Person::OneofVarCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test::SimpleEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test::SimpleEnum>() {
  return ::test::SimpleEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
